[{"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\App.js":"1","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\index.js":"2","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\HomeTab.jsx":"3","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\CustomerTab.jsx":"4","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\VendorTab.jsx":"5","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\Sidebar.jsx":"6","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\TabNavs.jsx":"7","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\PolicyModal.jsx":"8","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\DateHelpers.js":"9","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\CensusModal.jsx":"10","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\ExtraModals.jsx":"11","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\InvoiceModal.jsx":"12","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\CustomerHooks.js":"13"},{"size":10285,"mtime":1612895855130,"results":"14","hashOfConfig":"15"},{"size":230,"mtime":1608145314873,"results":"16","hashOfConfig":"15"},{"size":914,"mtime":1612853017616,"results":"17","hashOfConfig":"15"},{"size":8275,"mtime":1613970638421,"results":"18","hashOfConfig":"15"},{"size":2028,"mtime":1611451074400,"results":"19","hashOfConfig":"15"},{"size":947,"mtime":1609743235634,"results":"20","hashOfConfig":"15"},{"size":4659,"mtime":1611452123055,"results":"21","hashOfConfig":"15"},{"size":31848,"mtime":1612895907257,"results":"22","hashOfConfig":"15"},{"size":1176,"mtime":1611349257174,"results":"23","hashOfConfig":"15"},{"size":6953,"mtime":1612853075790,"results":"24","hashOfConfig":"15"},{"size":621,"mtime":1610907810233,"results":"25","hashOfConfig":"15"},{"size":13275,"mtime":1614390297710,"results":"26","hashOfConfig":"15"},{"size":509,"mtime":1614091298915,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"17evsmg",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\App.js",[],["60","61"],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\index.js",[],["62","63"],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\HomeTab.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\CustomerTab.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\VendorTab.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\Sidebar.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\TabNavs.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\PolicyModal.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\DateHelpers.js",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\CensusModal.jsx",["64"],"import Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { myTime, myDate } from \"./DateHelpers\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport function CensusModal(props) {\r\n  // Form value hooks\r\n  const [user, setUser] = useState(\"\");\r\n  const [covmonth, setCovMonth] = useState(\"\");\r\n  const [ee, setEE] = useState(\"\");\r\n  const [es, setES] = useState(\"\");\r\n  const [ec, setEC] = useState(\"\");\r\n  const [ef, setEF] = useState(\"\");\r\n\r\n  // Form validation and composite calculation hooks\r\n  const [validated, setValidated] = useState(false);\r\n  const [compositeValue, setCompositeValue] = useState(\"0\");\r\n\r\n  // Form input sho state\r\n  const [edit, setEdit] = useState(true);\r\n  const [newC, setNew] = useState(true);\r\n\r\n  // Form inpute disables\r\n  const [covmonthDis, setCovMonthDis] = useState(false);\r\n  const [eeDis, setEEDis] = useState(false);\r\n  const [esDis, setESDis] = useState(false);\r\n  const [ecDis, setECDis] = useState(false);\r\n  const [efDis, setEFDis] = useState(false);\r\n\r\n  const censusValues = [ee, es, ec, ef];\r\n  const censusFormHooks = {\r\n    user: setUser,\r\n    covmonth: setCovMonth,\r\n    ee: setEE,\r\n    es: setES,\r\n    ec: setEC,\r\n    ef: setEF,\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const form = event.currentTarget;\r\n    const isValid = form.checkValidity();\r\n    if (isValid) {\r\n      const params = {\r\n        Customer: props.tabState[2],\r\n        EE: Number(ee),\r\n        ES: Number(es),\r\n        EC: Number(ec),\r\n        EF: Number(ef),\r\n        DTS: Math.floor(Date.now() / 1000),\r\n        InvDate: \"\",\r\n        CovDate: myTime(covmonth),\r\n        Status: \"Actual\",\r\n        User: user,\r\n      };\r\n      props.onCensusInsert(params, newC);\r\n      handleHide();\r\n    }\r\n\r\n    setValidated(true);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setEEDis(false);\r\n    setESDis(false);\r\n    setECDis(false);\r\n    setEFDis(false);\r\n\r\n    setEdit(true);\r\n  };\r\n\r\n  const handleFormChanges = (event) => {\r\n    censusFormHooks[event.target.id](event.target.value);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    Object.keys(censusFormHooks).forEach(function (key) {\r\n      censusFormHooks[key](\"\");\r\n    });\r\n    setUser(\"\");\r\n\r\n    setValidated(false);\r\n    setCovMonthDis(false);\r\n    setEEDis(false);\r\n    setESDis(false);\r\n    setECDis(false);\r\n    setEFDis(false);\r\n\r\n    setEdit(true);\r\n    setNew(true);\r\n  };\r\n\r\n  const handleShow = () => {\r\n    if (!props.newCensus) {\r\n      setEE(props.selectedCensus.EE);\r\n      setES(props.selectedCensus.ES);\r\n      setEC(props.selectedCensus.EC);\r\n      setEF(props.selectedCensus.EF);\r\n      setCovMonth(myDate(props.selectedCensus.CovDate));\r\n\r\n      setCovMonthDis(true);\r\n      setEEDis(true);\r\n      setESDis(true);\r\n      setECDis(true);\r\n      setEFDis(true);\r\n\r\n      setEdit(false);\r\n      setNew(false);\r\n    }\r\n  };\r\n\r\n  const handleHide = () => {\r\n    handleReset();\r\n    props.onHide();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCompositeValue(\r\n      String(censusValues.reduce((a, b) => Number(a) + Number(b)))\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Modal\r\n      onShow={handleShow}\r\n      onHide={handleHide}\r\n      show={props.show}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      backdrop=\"static\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Census Entry\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <Form noValidate onSubmit={handleSubmit} validated={validated}>\r\n          {edit && (\r\n            <Form.Group controlId=\"user\">\r\n              <Form.Label>User</Form.Label>\r\n              <Form.Control\r\n                value={user}\r\n                onChange={handleFormChanges}\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"First Last\"\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                User is a required field\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n          )}\r\n          <Form.Group controlId=\"covmonth\">\r\n            <Form.Label>Coverage Month</Form.Label>\r\n            <Form.Control\r\n              value={covmonth}\r\n              onChange={handleFormChanges}\r\n              disabled={covmonthDis}\r\n              required\r\n              type=\"month\"\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Coverage Month is a required field\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          <Form.Row className=\"MyFormRow\">\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ee\">\r\n              <Form.Label>EE</Form.Label>\r\n              <Form.Control\r\n                value={ee}\r\n                onChange={handleFormChanges}\r\n                disabled={eeDis}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"es\">\r\n              <Form.Label>ES</Form.Label>\r\n              <Form.Control\r\n                disabled={esDis}\r\n                value={es}\r\n                onChange={handleFormChanges}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ec\">\r\n              <Form.Label>EC</Form.Label>\r\n              <Form.Control\r\n                disabled={ecDis}\r\n                value={ec}\r\n                onChange={handleFormChanges}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ef\">\r\n              <Form.Label>EF/Comp</Form.Label>\r\n              <Form.Control\r\n                value={ef}\r\n                onChange={handleFormChanges}\r\n                disabled={efDis}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"composite\">\r\n              <Form.Label>Composite</Form.Label>\r\n              <Form.Control disabled type=\"number\" value={compositeValue} />\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            {edit && (\r\n              <div className=\"MyFormButton\">\r\n                <Button type=\"submit\">Submit</Button>\r\n              </div>\r\n            )}\r\n            {!edit && (\r\n              <div className=\"MyFormButton\" onClick={handleEdit}>\r\n                <Button type=\"button\">Edit</Button>\r\n              </div>\r\n            )}\r\n          </Form.Row>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer></Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n",["65","66"],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\ExtraModals.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\InvoiceModal.jsx",["67","68","69"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { myDate } from \"./DateHelpers\";\r\nimport { useInterval } from \"./CustomerHooks\";\r\n\r\nexport const InvoiceModal = (props) => {\r\n  const [policy, setPolicy] = useState(\"\");\r\n  const [billingtype, setBillingType] = useState(\"\");\r\n  const [invoicemonth, setInvoiceMonth] = useState(\"\");\r\n\r\n  const [ee, setEE] = useState(\"\");\r\n  const [es, setES] = useState(\"\");\r\n  const [ec, setEC] = useState(\"\");\r\n  const [ef, setEF] = useState(\"\");\r\n\r\n  // Adjustments in census\r\n  const [adjust, setAdjust] = useState([]);\r\n\r\n  // Derived from date\r\n  const [feespremium, setFeesPremium] = useState([]);\r\n  const [censuspremium, setCensusPremium] = useState([]);\r\n\r\n  // Form validation and composite calculation hooks\r\n  const [compositeValue, setCompositeValue] = useState(\"0\");\r\n\r\n  // Line array\r\n  const [lines, setLines] = useState([]);\r\n\r\n  // Total Array\r\n  const [total, setTotal] = useState(0);\r\n\r\n  const createCensusAndRates = () => {\r\n    // Creates and array with filtered policies by customer\r\n    var filteredpolicies = props.policies.filter(\r\n      (policy) => policy.Customer === props.customer\r\n    );\r\n\r\n    var filteredcensus = props.census.filter(\r\n      (cen) => cen.Customer === props.customer\r\n    );\r\n    filteredcensus.sort((a, b) => (a.CovDate < b.CovDate ? 1 : -1));\r\n\r\n    if (invoicemonth && filteredpolicies.length) {\r\n      // filters policies by date which their should only be one or none\r\n      filteredpolicies = filteredpolicies.filter((policy) => {\r\n        var inter = invoicemonth.split(\"-\");\r\n        var current = parseInt(inter[0]) * 12 + parseInt(inter[1]);\r\n        inter = myDate(policy.StartDate).split(\"-\");\r\n        var inf = parseInt(inter[0]) * 12 + parseInt(inter[1]);\r\n        var sup = parseInt(policy.MIC) + inf;\r\n\r\n        return inf <= current && current < sup;\r\n      });\r\n\r\n      // uses the policy to set rates and bill lines\r\n      if (filteredpolicies.length && filteredcensus.length) {\r\n        var validcensus = filteredcensus[0];\r\n        if (!ee && !es && !ec && !ef) {\r\n          setEE(validcensus.EE);\r\n          setEC(validcensus.EC);\r\n          setES(validcensus.ES);\r\n          setEF(validcensus.EF);\r\n        }\r\n      }\r\n\r\n      var validpolicy = filteredpolicies[0];\r\n      var filteredfeespremium = props.feespremium.filter(\r\n        (fee) => fee.PID === validpolicy.PID\r\n      );\r\n      var filteredcensuspremium = props.censuspremium.filter(\r\n        (fee) => fee.PID === validpolicy.PID\r\n      );\r\n      setBillingType(validpolicy.BillingType);\r\n      setPolicy(validpolicy.Carrier + \" \" + myDate(validpolicy.StartDate));\r\n      setFeesPremium(filteredfeespremium);\r\n      setCensusPremium(filteredcensuspremium);\r\n    } else {\r\n      setFeesPremium([]);\r\n      setCensusPremium([]);\r\n      setAdjust([]);\r\n    }\r\n  };\r\n\r\n  const createLines = () => {\r\n    var newLines = [];\r\n    if (censuspremium) {\r\n      censuspremium.forEach((cp) => {\r\n        if (cp.TierStruc === \"1-Tier\") {\r\n          newLines.push({\r\n            Description: \"Comp\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EF,\r\n            Lives: parseInt(compositeValue),\r\n            Amount: (parseInt(compositeValue) * cp.EF).toFixed(2),\r\n          });\r\n        } else if (cp.TierStruc === \"2-Tier\") {\r\n          newLines.push({\r\n            Description: \"EE\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EE,\r\n            Lives: parseInt(ee),\r\n            Amount: (parseInt(ee) * cp.EE).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"EF\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EF,\r\n            Lives: parseInt(compositeValue) - parseInt(ee),\r\n            Amount: ((parseInt(compositeValue) - parseInt(ee)) * cp.EF).toFixed(\r\n              2\r\n            ),\r\n          });\r\n        } else if (cp.TierStruc === \"4-Tier\") {\r\n          newLines.push({\r\n            Description: \"EE\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EE,\r\n            Lives: parseInt(ee),\r\n            Amount: (parseInt(ee) * cp.EE).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"ES\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.ES,\r\n            Lives: parseInt(es),\r\n            Amount: (parseInt(es) * cp.ES).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"EC\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EC,\r\n            Lives: parseInt(ec),\r\n            Amount: (parseInt(ec) * cp.EC).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"EF\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EF,\r\n            Lives: parseInt(ef),\r\n            Amount: (parseInt(ef) * cp.EF).toFixed(2),\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (feespremium) {\r\n      console.log(feespremium);\r\n      feespremium.forEach((fp) => {\r\n        if (fp.Calc === \"Flat Fee\") {\r\n          newLines.push({\r\n            Description: \"Flat Fee\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census EE\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census EE\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census ES\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census ES\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census EC\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census EC\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census EF\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census EF\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census Composite\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census Composite\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        }\r\n      });\r\n    }\r\n    setLines(newLines);\r\n    console.log(newLines);\r\n  };\r\n\r\n  const createComposite = () => {\r\n    const censusValues = [ee, es, ec, ef];\r\n    setCompositeValue(\r\n      String(censusValues.reduce((a, b) => Number(a) + Number(b)))\r\n    );\r\n  };\r\n\r\n  const createTotal = () => {\r\n    var newTotal = 0;\r\n    if (lines.length) {\r\n      lines.forEach((line) => {\r\n        newTotal += Number(line.Amount);\r\n        console.log(line.Amount);\r\n      });\r\n    } else {\r\n      newTotal = 0;\r\n    }\r\n    setTotal(newTotal);\r\n  };\r\n\r\n  useInterval(createComposite, 1000);\r\n  useInterval(createCensusAndRates, 1000);\r\n  useInterval(createLines, 1000);\r\n  useInterval(createTotal, 1000);\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      backdrop=\"static\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">Invoice</Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <Form noValidate>\r\n          <Form.Group controlId=\"policy\">\r\n            <Form.Label>Policy</Form.Label>\r\n            <Form.Control\r\n              value={policy}\r\n              onChange={(event) => {\r\n                setPolicy(event.target.value);\r\n              }}\r\n              disabled\r\n              type=\"text\"\r\n              placeholder=\"Carrier-DD-MMM-YYY\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"billingtype\">\r\n            <Form.Label>Billing Type</Form.Label>\r\n            <Form.Control\r\n              value={billingtype}\r\n              onChange={(event) => {\r\n                setBillingType(event.target.value);\r\n              }}\r\n              disabled\r\n              type=\"text\"\r\n              placeholder=\"Census/Self-Bill/Self-Adjust\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"invicemonth\">\r\n            <Form.Label>Invoice Month</Form.Label>\r\n            <Form.Control\r\n              value={invoicemonth}\r\n              onChange={(event) => {\r\n                setInvoiceMonth(event.target.value);\r\n              }}\r\n              type=\"month\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <h4>Census</h4>\r\n\r\n          <Form.Row className=\"MyFormRow\">\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ee\">\r\n              <Form.Label>EE</Form.Label>\r\n              <Form.Control\r\n                value={ee}\r\n                onChange={(event) => {\r\n                  setEE(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"es\">\r\n              <Form.Label>ES</Form.Label>\r\n              <Form.Control\r\n                value={es}\r\n                onChange={(event) => {\r\n                  setES(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ec\">\r\n              <Form.Label>EC</Form.Label>\r\n              <Form.Control\r\n                value={ec}\r\n                onChange={(event) => {\r\n                  setEC(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ef\">\r\n              <Form.Label>EF/Comp</Form.Label>\r\n              <Form.Control\r\n                value={ef}\r\n                onChange={(event) => {\r\n                  setEF(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"composite\">\r\n              <Form.Label>Composite</Form.Label>\r\n              <Form.Control disabled type=\"number\" value={compositeValue} />\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <h4>Lines</h4>\r\n\r\n          <div className=\"MyTable InvoiceModalLines\">\r\n            <div>\r\n              <table>\r\n                <thead>\r\n                  <th>Description</th>\r\n                  <th>Product/Service</th>\r\n                  <th>Rate</th>\r\n                  <th>Lives</th>\r\n                  <th>Amount</th>\r\n                </thead>\r\n              </table>\r\n            </div>\r\n            {lines.map((li) => {\r\n              return (\r\n                <div key={li.Description + li.Product_Service}>\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{li.Description}</td>\r\n                        <td>{li.Product_Service}</td>\r\n                        <td>{li.Rate}</td>\r\n                        <td>{li.Lives}</td>\r\n                        <td>{li.Amount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            <div key=\"blanktotal\">\r\n              <table>\r\n                <tbody>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div key=\"total\">\r\n              <table>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Total</td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td>{total}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <h1></h1>\r\n          <Form.Row>\r\n            <div className=\"MyFormButton\">\r\n              <Button type=\"button\">Submit</Button>\r\n            </div>\r\n          </Form.Row>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer></Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\Proggamming Practice-SABS\\sabs\\src\\components\\CustomerHooks.js",["70","71"],"import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"72","replacedBy":"76"},{"ruleId":"74","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":122,"column":3,"nodeType":"80","endLine":122,"endColumn":12,"suggestions":"81"},{"ruleId":"72","replacedBy":"82"},{"ruleId":"74","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":27,"nodeType":"80","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"87","line":20,"column":10,"nodeType":"80","messageId":"86","endLine":20,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":413,"column":11,"nodeType":"90","endLine":413,"endColumn":15},{"ruleId":"84","severity":1,"message":"91","line":1,"column":8,"nodeType":"80","messageId":"86","endLine":1,"endColumn":13},{"ruleId":"84","severity":1,"message":"92","line":1,"column":17,"nodeType":"80","messageId":"86","endLine":1,"endColumn":25},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setCompositeValue'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [censusValues] as a second argument to the useEffect Hook.","Identifier",["95"],["93"],["94"],"no-unused-vars","'useEffect' is defined but never used.","unusedVar","'adjust' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'React' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Add dependencies array: [censusValues]",{"range":"98","text":"99"},[3215,3215],", [censusValues]"]