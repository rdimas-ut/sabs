[{"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\index.js":"1","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\InvoiceModal.jsx":"2","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\CustomerHooks.js":"3","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\PolicyModal.jsx":"4","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\CensusModal.jsx":"5","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\TabNavs.jsx":"6","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\BillModal.jsx":"7","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\CustomerTab.jsx":"8","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\VendorTab.jsx":"9","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\App.js":"10","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\DateHelpers.js":"11","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\Sidebar.jsx":"12","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\HomeTab.jsx":"13","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\ExtraModals.jsx":"14"},{"size":230,"mtime":1608145314873,"results":"15","hashOfConfig":"16"},{"size":20736,"mtime":1615826012800,"results":"17","hashOfConfig":"16"},{"size":492,"mtime":1615049678329,"results":"18","hashOfConfig":"16"},{"size":31848,"mtime":1612895907257,"results":"19","hashOfConfig":"16"},{"size":6963,"mtime":1615050896378,"results":"20","hashOfConfig":"16"},{"size":4924,"mtime":1615831816122,"results":"21","hashOfConfig":"16"},{"size":4925,"mtime":1615866006820,"results":"22","hashOfConfig":"16"},{"size":9472,"mtime":1615832221770,"results":"23","hashOfConfig":"16"},{"size":3911,"mtime":1615832226262,"results":"24","hashOfConfig":"16"},{"size":12451,"mtime":1615914084368,"results":"25","hashOfConfig":"16"},{"size":1176,"mtime":1611349257174,"results":"26","hashOfConfig":"16"},{"size":947,"mtime":1609743235634,"results":"27","hashOfConfig":"16"},{"size":914,"mtime":1612853017616,"results":"28","hashOfConfig":"16"},{"size":621,"mtime":1610907810233,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1on4o80",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\index.js",[],["64","65"],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\InvoiceModal.jsx",["66","67"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { myDate, myTime } from \"./DateHelpers\";\r\nimport { useInterval } from \"./CustomerHooks\";\r\n\r\nexport const InvoiceModal = (props) => {\r\n  const [policy, setPolicy] = useState(\"\");\r\n  const [billingtype, setBillingType] = useState(\"\");\r\n  const [invoicemonth, setInvoiceMonth] = useState(\"\");\r\n\r\n  const [ee, setEE] = useState(\"\");\r\n  const [es, setES] = useState(\"\");\r\n  const [ec, setEC] = useState(\"\");\r\n  const [ef, setEF] = useState(\"\");\r\n\r\n  // New\r\n  const [newC, setNew] = useState(true);\r\n  const [validated, setValidated] = useState(false);\r\n\r\n  // Adjustments in census\r\n  const [adjust, setAdjust] = useState([]);\r\n\r\n  // Derived from date\r\n  const [feespremium, setFeesPremium] = useState([]);\r\n  const [censuspremium, setCensusPremium] = useState([]);\r\n\r\n  // Form validation and composite calculation hooks\r\n  const [compositeValue, setCompositeValue] = useState(\"0\");\r\n\r\n  // Line array\r\n  const [lines, setLines] = useState([]);\r\n  const [adjustlines, setAdjustLines] = useState([]);\r\n\r\n  // Total Array\r\n  const [total, setTotal] = useState(0);\r\n\r\n  const createCensusAndRates = () => {\r\n    var newadjust = [];\r\n    var adjustment = {};\r\n\r\n    // Creates and array with filtered policies by customer\r\n    var filteredpolicies = props.policies.filter(\r\n      (policy) => policy.Customer === props.customer\r\n    );\r\n\r\n    var filteredcensus = props.census.filter(\r\n      (cen) => cen.Customer === props.customer && cen.Status === \"Actual\"\r\n    );\r\n    filteredcensus.sort((a, b) => (a.CovDate < b.CovDate ? 1 : -1));\r\n\r\n    if (invoicemonth && filteredpolicies.length) {\r\n      // Finds the adjustments to the past 6 months\r\n      var filteredcensusactual = filteredcensus;\r\n\r\n      var filteredcensusinvoice = props.censusinvoice.filter(\r\n        (cen) => cen.Customer === props.customer\r\n      );\r\n\r\n      var differences = [0, 0, 0, 0];\r\n      for (var j = 0; j < filteredcensusactual.length; j++) {\r\n        differences = [0, 0, 0, 0];\r\n        for (var i = 0; i < filteredcensusinvoice.length; i++) {\r\n          differences[0] =\r\n            filteredcensusactual[j].EE - filteredcensusinvoice[i].EE;\r\n          differences[1] =\r\n            filteredcensusactual[j].EC - filteredcensusinvoice[i].EC;\r\n          differences[2] =\r\n            filteredcensusactual[j].ES - filteredcensusinvoice[i].ES;\r\n          differences[3] =\r\n            filteredcensusactual[j].EF - filteredcensusinvoice[i].EF;\r\n\r\n          if (\r\n            Math.abs(differences[0]) > 0 ||\r\n            Math.abs(differences[1]) > 0 ||\r\n            Math.abs(differences[2]) > 0 ||\r\n            Math.abs(differences[3]) > 0\r\n          ) {\r\n            if (\r\n              filteredcensusactual[j].CovDate ===\r\n              filteredcensusinvoice[i].CovDate\r\n            ) {\r\n              adjustment = {\r\n                EE: differences[0],\r\n                EC: differences[1],\r\n                ES: differences[2],\r\n                EF: differences[3],\r\n                CovDate: filteredcensusinvoice[i].CovDate,\r\n              };\r\n              newadjust.push(adjustment);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // filters policies by date which their should only be one or none\r\n      filteredpolicies = filteredpolicies.filter((policy) => {\r\n        var inter = invoicemonth.split(\"-\");\r\n        var current = parseInt(inter[0]) * 12 + parseInt(inter[1]);\r\n        inter = myDate(policy.StartDate).split(\"-\");\r\n        var inf = parseInt(inter[0]) * 12 + parseInt(inter[1]);\r\n        var sup = parseInt(policy.MIC) + inf;\r\n\r\n        return inf <= current && current < sup;\r\n      });\r\n\r\n      // uses the policy to set rates and bill lines\r\n      if (filteredpolicies.length && filteredcensus.length) {\r\n        var validcensus = filteredcensus[0];\r\n        if (!ee && !es && !ec && !ef) {\r\n          setEE(validcensus.EE);\r\n          setEC(validcensus.EC);\r\n          setES(validcensus.ES);\r\n          setEF(validcensus.EF);\r\n        }\r\n      }\r\n\r\n      var validpolicy = filteredpolicies[0];\r\n      var filteredfeespremium = props.feespremium;\r\n      var filteredcensuspremium = props.censuspremium;\r\n\r\n      if (filteredpolicies.length > 0) {\r\n        filteredfeespremium.filter((fee) => fee.PID === validpolicy.PID);\r\n        filteredcensuspremium.filter((fee) => fee.PID === validpolicy.PID);\r\n      }\r\n\r\n      if (filteredpolicies.length > 0) {\r\n        setBillingType(validpolicy.BillingType);\r\n        setPolicy(validpolicy.Carrier + \" \" + myDate(validpolicy.StartDate));\r\n      }\r\n\r\n      setFeesPremium(filteredfeespremium);\r\n      setCensusPremium(filteredcensuspremium);\r\n      setAdjust(newadjust);\r\n\r\n      console.log(adjust);\r\n    } else {\r\n      setFeesPremium([]);\r\n      setCensusPremium([]);\r\n      setAdjust([]);\r\n    }\r\n  };\r\n\r\n  const createLines = () => {\r\n    var newLines = [];\r\n    var newAdjustLines = [];\r\n\r\n    adjust.forEach((adj) => {\r\n      if (censuspremium) {\r\n        censuspremium.forEach((cp) => {\r\n          if (cp.TierStruc === \"1-Tier\") {\r\n            newAdjustLines.push({\r\n              Description: myDate(adj.CovDate) + \" - Comp\",\r\n              Product_Service: cp.Type,\r\n              Rate: cp.EF,\r\n              Lives: parseInt(adj.EE + adj.EC + adj.ES + adj.EF),\r\n              Amount: (\r\n                parseInt(adj.EE + adj.EC + adj.ES + adj.EF) * cp.EF\r\n              ).toFixed(2),\r\n            });\r\n          } else if (cp.TierStruc === \"2-Tier\") {\r\n            newAdjustLines.push({\r\n              Description: myDate(adj.CovDate) + \" - EE\",\r\n              Product_Service: cp.Type,\r\n              Rate: cp.EE,\r\n              Lives: parseInt(adj.EE),\r\n              Amount: (parseInt(adj.EE) * cp.EE).toFixed(2),\r\n            });\r\n            newAdjustLines.push({\r\n              Description: myDate(adj.CovDate) + \" - EF\",\r\n              Product_Service: cp.Type,\r\n              Rate: cp.EF,\r\n              Lives:\r\n                parseInt(adj.EE + adj.EC + adj.ES + adj.EF) - parseInt(adj.EE),\r\n              Amount: (\r\n                (parseInt(adj.EE + adj.EC + adj.ES + adj.EF) -\r\n                  parseInt(adj.EE)) *\r\n                cp.EF\r\n              ).toFixed(2),\r\n            });\r\n          } else if (cp.TierStruc === \"4-Tier\") {\r\n            newAdjustLines.push({\r\n              Description: myDate(adj.CovDate) + \" - EE\",\r\n              Product_Service: cp.Type,\r\n              Rate: cp.EE,\r\n              Lives: parseInt(adj.EE),\r\n              Amount: (parseInt(adj.EE) * cp.EE).toFixed(2),\r\n            });\r\n            newAdjustLines.push({\r\n              Description: myDate(adj.CovDate) + \" - ES\",\r\n              Product_Service: cp.Type,\r\n              Rate: cp.ES,\r\n              Lives: parseInt(adj.ES),\r\n              Amount: (parseInt(adj.ES) * cp.ES).toFixed(2),\r\n            });\r\n            newAdjustLines.push({\r\n              Description: myDate(adj.CovDate) + \" - EC\",\r\n              Product_Service: cp.Type,\r\n              Rate: cp.EC,\r\n              Lives: parseInt(adj.EC),\r\n              Amount: (parseInt(adj.EC) * cp.EC).toFixed(2),\r\n            });\r\n            newAdjustLines.push({\r\n              Description: myDate(adj.CovDate) + \" - EF\",\r\n              Product_Service: cp.Type,\r\n              Rate: cp.EF,\r\n              Lives: parseInt(adj.EF),\r\n              Amount: (parseInt(adj.EF) * cp.EF).toFixed(2),\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    if (censuspremium) {\r\n      censuspremium.forEach((cp) => {\r\n        if (cp.TierStruc === \"1-Tier\") {\r\n          newLines.push({\r\n            Description: \"Comp\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EF,\r\n            Lives: parseInt(compositeValue),\r\n            Amount: (parseInt(compositeValue) * cp.EF).toFixed(2),\r\n          });\r\n        } else if (cp.TierStruc === \"2-Tier\") {\r\n          newLines.push({\r\n            Description: \"EE\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EE,\r\n            Lives: parseInt(ee),\r\n            Amount: (parseInt(ee) * cp.EE).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"EF\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EF,\r\n            Lives: parseInt(compositeValue) - parseInt(ee),\r\n            Amount: ((parseInt(compositeValue) - parseInt(ee)) * cp.EF).toFixed(\r\n              2\r\n            ),\r\n          });\r\n        } else if (cp.TierStruc === \"4-Tier\") {\r\n          newLines.push({\r\n            Description: \"EE\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EE,\r\n            Lives: parseInt(ee),\r\n            Amount: (parseInt(ee) * cp.EE).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"ES\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.ES,\r\n            Lives: parseInt(es),\r\n            Amount: (parseInt(es) * cp.ES).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"EC\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EC,\r\n            Lives: parseInt(ec),\r\n            Amount: (parseInt(ec) * cp.EC).toFixed(2),\r\n          });\r\n          newLines.push({\r\n            Description: \"EF\",\r\n            Product_Service: cp.Type,\r\n            Rate: cp.EF,\r\n            Lives: parseInt(ef),\r\n            Amount: (parseInt(ef) * cp.EF).toFixed(2),\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (feespremium) {\r\n      feespremium.forEach((fp) => {\r\n        if (fp.Calc === \"Flat Fee\") {\r\n          newLines.push({\r\n            Description: \"Flat Fee\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census EE\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census EE\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census ES\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census ES\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census EC\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census EC\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census EF\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census EF\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        } else if (fp.Calc === \"Flat Per Census Composite\") {\r\n          newLines.push({\r\n            Description: \"Flat Per Census Composite\",\r\n            Product_Service: fp.Product,\r\n            Rate: fp.Rate,\r\n            Lives: 1,\r\n            Amount: fp.Rate,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    setLines(newLines);\r\n    setAdjustLines(newAdjustLines);\r\n  };\r\n\r\n  const createComposite = () => {\r\n    const censusValues = [ee, es, ec, ef];\r\n    setCompositeValue(\r\n      String(censusValues.reduce((a, b) => Number(a) + Number(b)))\r\n    );\r\n  };\r\n\r\n  const createTotal = () => {\r\n    var newTotal = 0;\r\n    if (lines.length) {\r\n      lines.forEach((line) => {\r\n        newTotal += Number(line.Amount);\r\n      });\r\n    } else {\r\n      newTotal = 0;\r\n    }\r\n    setTotal(newTotal);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    var invData = {};\r\n    var invLines = [];\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const form = event.currentTarget;\r\n    const isValid = form.checkValidity();\r\n    if (isValid) {\r\n      const params = {\r\n        Customer: props.customer,\r\n        EE: Number(ee),\r\n        ES: Number(es),\r\n        EC: Number(ec),\r\n        EF: Number(ef),\r\n        DTS: Math.floor(Date.now() / 1000),\r\n        InvDate: myTime(invoicemonth),\r\n        CovDate: myTime(invoicemonth),\r\n        Status: \"Invoice\",\r\n        User: \"No User\",\r\n      };\r\n      props.onCensusInsert(params, newC, \"Invoice\");\r\n      adjust.forEach((adj) => {\r\n        props.onCensusInsert(\r\n          {\r\n            Customer: props.customer,\r\n            EE: Number(adj.EE),\r\n            EC: Number(adj.EC),\r\n            ES: Number(adj.ES),\r\n            EF: Number(adj.EF),\r\n            DTS: Math.floor(Date.now() / 1000),\r\n            InvDate: myTime(invoicemonth),\r\n            CovDate: adj.CovDate,\r\n            Status: \"Invoice\",\r\n            User: \"No User\",\r\n          },\r\n          newC,\r\n          \"Invoice\"\r\n        );\r\n      });\r\n\r\n      invData = {\r\n        Customer: props.customer,\r\n        InvDate: myTime(invoicemonth),\r\n      };\r\n\r\n      lines.forEach((li) => {\r\n        invLines.push({\r\n          Description: li.Description,\r\n          Amount: li.Amount,\r\n          Qty: li.Lives,\r\n          UnitPrice: li.Rate,\r\n        });\r\n      });\r\n\r\n      adjustlines.forEach((ali) => {\r\n        invLines.push({\r\n          Description: ali.Description,\r\n          Amount: ali.Amount,\r\n          Qty: ali.Lives,\r\n          UnitPrice: ali.Rate,\r\n        });\r\n      });\r\n\r\n      props.onInvoiceCreate(invData, invLines);\r\n\r\n      handleHide();\r\n    }\r\n\r\n    setValidated(true);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setPolicy(\"\");\r\n    setBillingType(\"\");\r\n    setInvoiceMonth(\"\");\r\n\r\n    setEE(\"\");\r\n    setES(\"\");\r\n    setEC(\"\");\r\n    setEF(\"\");\r\n\r\n    setAdjust([]);\r\n\r\n    setFeesPremium([]);\r\n    setCensusPremium([]);\r\n\r\n    setCompositeValue([]);\r\n\r\n    setLines([]);\r\n\r\n    setTotal(0);\r\n  };\r\n\r\n  const handleHide = () => {\r\n    handleReset();\r\n    props.onHide();\r\n  };\r\n\r\n  useInterval(createComposite, 1000);\r\n  useInterval(createCensusAndRates, 1000);\r\n  useInterval(createLines, 1000);\r\n  useInterval(createTotal, 1000);\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={handleHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      backdrop=\"static\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">Invoice</Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <Form noValidate onSubmit={handleSubmit} validated={validated}>\r\n          <Form.Group controlId=\"policy\">\r\n            <Form.Label>Policy</Form.Label>\r\n            <Form.Control\r\n              value={policy}\r\n              onChange={(event) => {\r\n                setPolicy(event.target.value);\r\n              }}\r\n              disabled\r\n              type=\"text\"\r\n              placeholder=\"Carrier-DD-MMM-YYY\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"billingtype\">\r\n            <Form.Label>Billing Type</Form.Label>\r\n            <Form.Control\r\n              value={billingtype}\r\n              onChange={(event) => {\r\n                setBillingType(event.target.value);\r\n              }}\r\n              disabled\r\n              type=\"text\"\r\n              placeholder=\"Census/Self-Bill/Self-Adjust\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"invicemonth\">\r\n            <Form.Label>Invoice Month</Form.Label>\r\n            <Form.Control\r\n              value={invoicemonth}\r\n              onChange={(event) => {\r\n                setInvoiceMonth(event.target.value);\r\n              }}\r\n              type=\"month\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n\r\n          <h4>Census</h4>\r\n\r\n          <Form.Row className=\"MyFormRow\">\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ee\">\r\n              <Form.Label>EE</Form.Label>\r\n              <Form.Control\r\n                value={ee}\r\n                onChange={(event) => {\r\n                  setEE(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"es\">\r\n              <Form.Label>ES</Form.Label>\r\n              <Form.Control\r\n                value={es}\r\n                onChange={(event) => {\r\n                  setES(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ec\">\r\n              <Form.Label>EC</Form.Label>\r\n              <Form.Control\r\n                value={ec}\r\n                onChange={(event) => {\r\n                  setEC(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ef\">\r\n              <Form.Label>EF/Comp</Form.Label>\r\n              <Form.Control\r\n                value={ef}\r\n                onChange={(event) => {\r\n                  setEF(event.target.value);\r\n                }}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"composite\">\r\n              <Form.Label>Composite</Form.Label>\r\n              <Form.Control disabled type=\"number\" value={compositeValue} />\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <h4>Lines</h4>\r\n\r\n          <div className=\"MyTable InvoiceModalLines\">\r\n            <div>\r\n              <table>\r\n                <thead>\r\n                  <th>Description</th>\r\n                  <th>Product/Service</th>\r\n                  <th>Rate</th>\r\n                  <th>Lives</th>\r\n                  <th>Amount</th>\r\n                </thead>\r\n              </table>\r\n            </div>\r\n            {lines.map((li) => {\r\n              return (\r\n                <div key={li.Description + li.Product_Service}>\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{li.Description}</td>\r\n                        <td>{li.Product_Service}</td>\r\n                        <td>{li.Rate}</td>\r\n                        <td>{li.Lives}</td>\r\n                        <td>{li.Amount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            {adjustlines.map((ali) => {\r\n              return (\r\n                <div key={ali.Description + ali.Product_Service}>\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{ali.Description}</td>\r\n                        <td>{ali.Product_Service}</td>\r\n                        <td>{ali.Rate}</td>\r\n                        <td>{ali.Lives}</td>\r\n                        <td>{ali.Amount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            <div key=\"blanktotal\">\r\n              <table>\r\n                <tbody>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div key=\"total\">\r\n              <table>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Total</td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td>{total}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <h1></h1>\r\n          <Form.Row>\r\n            <div className=\"MyFormButton\">\r\n              <Button onClick={handleSubmit} type=\"button\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </Form.Row>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer></Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n",["68","69"],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\CustomerHooks.js",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\PolicyModal.jsx",[],["70","71"],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\CensusModal.jsx",["72"],"import Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { myTime, myDate } from \"./DateHelpers\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport function CensusModal(props) {\r\n  // Form value hooks\r\n  const [user, setUser] = useState(\"\");\r\n  const [covmonth, setCovMonth] = useState(\"\");\r\n  const [ee, setEE] = useState(\"\");\r\n  const [es, setES] = useState(\"\");\r\n  const [ec, setEC] = useState(\"\");\r\n  const [ef, setEF] = useState(\"\");\r\n\r\n  // Form validation and composite calculation hooks\r\n  const [validated, setValidated] = useState(false);\r\n  const [compositeValue, setCompositeValue] = useState(\"0\");\r\n\r\n  // Form input sho state\r\n  const [edit, setEdit] = useState(true);\r\n  const [newC, setNew] = useState(true);\r\n\r\n  // Form inpute disables\r\n  const [covmonthDis, setCovMonthDis] = useState(false);\r\n  const [eeDis, setEEDis] = useState(false);\r\n  const [esDis, setESDis] = useState(false);\r\n  const [ecDis, setECDis] = useState(false);\r\n  const [efDis, setEFDis] = useState(false);\r\n\r\n  const censusValues = [ee, es, ec, ef];\r\n  const censusFormHooks = {\r\n    user: setUser,\r\n    covmonth: setCovMonth,\r\n    ee: setEE,\r\n    es: setES,\r\n    ec: setEC,\r\n    ef: setEF,\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const form = event.currentTarget;\r\n    const isValid = form.checkValidity();\r\n    if (isValid) {\r\n      const params = {\r\n        Customer: props.tabState[2],\r\n        EE: Number(ee),\r\n        ES: Number(es),\r\n        EC: Number(ec),\r\n        EF: Number(ef),\r\n        DTS: Math.floor(Date.now() / 1000),\r\n        InvDate: \"\",\r\n        CovDate: myTime(covmonth),\r\n        Status: \"Actual\",\r\n        User: user,\r\n      };\r\n      props.onCensusInsert(params, newC, \"Actual\");\r\n      handleHide();\r\n    }\r\n\r\n    setValidated(true);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setEEDis(false);\r\n    setESDis(false);\r\n    setECDis(false);\r\n    setEFDis(false);\r\n\r\n    setEdit(true);\r\n  };\r\n\r\n  const handleFormChanges = (event) => {\r\n    censusFormHooks[event.target.id](event.target.value);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    Object.keys(censusFormHooks).forEach(function (key) {\r\n      censusFormHooks[key](\"\");\r\n    });\r\n    setUser(\"\");\r\n\r\n    setValidated(false);\r\n    setCovMonthDis(false);\r\n    setEEDis(false);\r\n    setESDis(false);\r\n    setECDis(false);\r\n    setEFDis(false);\r\n\r\n    setEdit(true);\r\n    setNew(true);\r\n  };\r\n\r\n  const handleShow = () => {\r\n    if (!props.newCensus) {\r\n      setEE(props.selectedCensus.EE);\r\n      setES(props.selectedCensus.ES);\r\n      setEC(props.selectedCensus.EC);\r\n      setEF(props.selectedCensus.EF);\r\n      setCovMonth(myDate(props.selectedCensus.CovDate));\r\n\r\n      setCovMonthDis(true);\r\n      setEEDis(true);\r\n      setESDis(true);\r\n      setECDis(true);\r\n      setEFDis(true);\r\n\r\n      setEdit(false);\r\n      setNew(false);\r\n    }\r\n  };\r\n\r\n  const handleHide = () => {\r\n    handleReset();\r\n    props.onHide();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCompositeValue(\r\n      String(censusValues.reduce((a, b) => Number(a) + Number(b)))\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Modal\r\n      onShow={handleShow}\r\n      onHide={handleHide}\r\n      show={props.show}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      backdrop=\"static\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Census Entry\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <Form noValidate onSubmit={handleSubmit} validated={validated}>\r\n          {edit && (\r\n            <Form.Group controlId=\"user\">\r\n              <Form.Label>User</Form.Label>\r\n              <Form.Control\r\n                value={user}\r\n                onChange={handleFormChanges}\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"First Last\"\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                User is a required field\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n          )}\r\n          <Form.Group controlId=\"covmonth\">\r\n            <Form.Label>Coverage Month</Form.Label>\r\n            <Form.Control\r\n              value={covmonth}\r\n              onChange={handleFormChanges}\r\n              disabled={covmonthDis}\r\n              required\r\n              type=\"month\"\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              Coverage Month is a required field\r\n            </Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          <Form.Row className=\"MyFormRow\">\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ee\">\r\n              <Form.Label>EE</Form.Label>\r\n              <Form.Control\r\n                value={ee}\r\n                onChange={handleFormChanges}\r\n                disabled={eeDis}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"es\">\r\n              <Form.Label>ES</Form.Label>\r\n              <Form.Control\r\n                disabled={esDis}\r\n                value={es}\r\n                onChange={handleFormChanges}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ec\">\r\n              <Form.Label>EC</Form.Label>\r\n              <Form.Control\r\n                disabled={ecDis}\r\n                value={ec}\r\n                onChange={handleFormChanges}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"ef\">\r\n              <Form.Label>EF/Comp</Form.Label>\r\n              <Form.Control\r\n                value={ef}\r\n                onChange={handleFormChanges}\r\n                disabled={efDis}\r\n                type=\"number\"\r\n                step=\"1\"\r\n                placeholder=\"0\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"2\" controlId=\"composite\">\r\n              <Form.Label>Composite</Form.Label>\r\n              <Form.Control disabled type=\"number\" value={compositeValue} />\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            {edit && (\r\n              <div className=\"MyFormButton\">\r\n                <Button type=\"submit\">Submit</Button>\r\n              </div>\r\n            )}\r\n            {!edit && (\r\n              <div className=\"MyFormButton\" onClick={handleEdit}>\r\n                <Button type=\"button\">Edit</Button>\r\n              </div>\r\n            )}\r\n          </Form.Row>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer></Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\TabNavs.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\BillModal.jsx",["73","74","75","76","77","78","79","80"],"import React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { myDate, myTime } from \"./DateHelpers\";\r\nimport { useInterval } from \"./CustomerHooks\";\r\n\r\nexport const BillModal = (props) => {\r\n  const [invoicemonth, setInvoiceMonth] = useState(\"\");\r\n\r\n  // New\r\n  const [validated, setValidated] = useState(false);\r\n\r\n  // Line array\r\n  const [lines, setLines] = useState([]);\r\n  const [adjustlines, setAdjustLines] = useState([]);\r\n\r\n  // Total Array\r\n  const [total, setTotal] = useState(0);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const form = event.currentTarget;\r\n    const isValid = form.checkValidity();\r\n    if (isValid) {\r\n      handleHide();\r\n    }\r\n\r\n    setValidated(true);\r\n  };\r\n\r\n  const handleReset = () => {};\r\n\r\n  const handleHide = () => {\r\n    handleReset();\r\n    props.onHide();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={handleHide}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      backdrop=\"static\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">Bill</Modal.Title>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <Form noValidate onSubmit={handleSubmit} validated={validated}>\r\n          <Form.Group controlId=\"invicemonth\">\r\n            <Form.Label>Invoice Month</Form.Label>\r\n            <Form.Control\r\n              value={invoicemonth}\r\n              onChange={(event) => {\r\n                setInvoiceMonth(event.target.value);\r\n              }}\r\n              type=\"month\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n\r\n          <h4>Lines</h4>\r\n\r\n          <div className=\"MyTable InvoiceModalLines\">\r\n            <div>\r\n              <table>\r\n                <thead>\r\n                  <th>Description</th>\r\n                  <th>Product/Service</th>\r\n                  <th>Rate</th>\r\n                  <th>Lives</th>\r\n                  <th>Amount</th>\r\n                </thead>\r\n              </table>\r\n            </div>\r\n            {lines.map((li) => {\r\n              return (\r\n                <div key={li.Description + li.Product_Service}>\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{li.Description}</td>\r\n                        <td>{li.Product_Service}</td>\r\n                        <td>{li.Rate}</td>\r\n                        <td>{li.Lives}</td>\r\n                        <td>{li.Amount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            {adjustlines.map((ali) => {\r\n              return (\r\n                <div key={ali.Description + ali.Product_Service}>\r\n                  <table>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{ali.Description}</td>\r\n                        <td>{ali.Product_Service}</td>\r\n                        <td>{ali.Rate}</td>\r\n                        <td>{ali.Lives}</td>\r\n                        <td>{ali.Amount}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            <div key=\"blanktotal\">\r\n              <table>\r\n                <tbody>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <div key=\"total\">\r\n              <table>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Total</td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td>{total}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <h1></h1>\r\n          <Form.Row>\r\n            <div className=\"MyFormButton\">\r\n              <Button onClick={handleSubmit} type=\"button\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </Form.Row>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer></Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\CustomerTab.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\VendorTab.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\App.js",["81"],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\DateHelpers.js",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\Sidebar.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\HomeTab.jsx",[],"C:\\Users\\Ruben Dimas\\Desktop\\Aquila\\SABS APP\\sabs\\src\\components\\ExtraModals.jsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":20,"column":16,"nodeType":"88","messageId":"89","endLine":20,"endColumn":22},{"ruleId":"90","severity":1,"message":"91","line":660,"column":11,"nodeType":"92","endLine":660,"endColumn":15},{"ruleId":"82","replacedBy":"93"},{"ruleId":"84","replacedBy":"94"},{"ruleId":"82","replacedBy":"95"},{"ruleId":"84","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":122,"column":3,"nodeType":"88","endLine":122,"endColumn":12,"suggestions":"99"},{"ruleId":"86","severity":1,"message":"100","line":5,"column":10,"nodeType":"88","messageId":"89","endLine":5,"endColumn":13},{"ruleId":"86","severity":1,"message":"101","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":16},{"ruleId":"86","severity":1,"message":"102","line":6,"column":18,"nodeType":"88","messageId":"89","endLine":6,"endColumn":24},{"ruleId":"86","severity":1,"message":"103","line":7,"column":10,"nodeType":"88","messageId":"89","endLine":7,"endColumn":21},{"ruleId":"86","severity":1,"message":"104","line":16,"column":17,"nodeType":"88","messageId":"89","endLine":16,"endColumn":25},{"ruleId":"86","severity":1,"message":"105","line":17,"column":23,"nodeType":"88","messageId":"89","endLine":17,"endColumn":37},{"ruleId":"86","severity":1,"message":"106","line":20,"column":17,"nodeType":"88","messageId":"89","endLine":20,"endColumn":25},{"ruleId":"90","severity":1,"message":"91","line":160,"column":11,"nodeType":"92","endLine":160,"endColumn":15},{"ruleId":"107","severity":1,"message":"108","line":138,"column":11,"nodeType":"88","messageId":"109","endLine":138,"endColumn":16},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'setNew' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",["110"],["111"],["110"],["111"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setCompositeValue'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [censusValues] as a second argument to the useEffect Hook.",["112"],"'Col' is defined but never used.","'myDate' is defined but never used.","'myTime' is defined but never used.","'useInterval' is defined but never used.","'setLines' is assigned a value but never used.","'setAdjustLines' is assigned a value but never used.","'setTotal' is assigned a value but never used.","no-redeclare","'commd' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},"Add dependencies array: [censusValues]",{"range":"115","text":"116"},[3225,3225],", [censusValues]"]